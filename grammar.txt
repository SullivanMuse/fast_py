# Grammar summary

basic
    id
    1234
    1.0e-5
    d"Hello\\, {x}"
    [e]
    (e)

Introduced expressions
    fn(x) { e }
    block = '{' statement[;] '}'
    return = 'return' expr?
    break = 'break'
    continue = 'continue'
    loop = 'loop' block

gather = '..' name?
item-pattern = pattern | gather
range-pattern = pattern? ('..' | '..=') pattern?
array-pattern = '[' item-pattern ']'
id-pattern = name
tag-pattern = ':' name
pattern = '_' | id-pattern '@' pattern | array-pattern | range-pattern | integer-pattern | float-pattern | tag-pattern | '{' expr '}'

left    x(y) x[y]
post    x.y
post    .await .chain ?
right   **
pre     ! ~ - : ...
left    [a]..[=][b]
left    * @ / // /^ %
left    + -
left    << >>
left    &
left    ^
left    |
listfix in notin is isnot < <= >= > == !=
left    and
left    or
listfix ,

# Statements

## Requiring semi-colon
use = 'use' path
    path = (name '.')* id ('as' id)? | '(' path[,] ')'
let = 'let' pattern '=' expr
assign = view '=' expr

## Not requiring semicolon
fn = 'fn' name '(' id[,] ')' block

statement = fn | return | break | continue | for | while | loop | use | let | assign
