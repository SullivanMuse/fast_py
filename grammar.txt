# Grammar summary

atom    id 1234 1.0e-5 d"Hello\\, {x}" [e] (e) (x -> e)

left    x(y) x[y] x.y
post    .await .chain ?
right   **
pre     ! ~ - : ...
left    [a]..[=][b]
left    * @ / // /^ %
left    + -
left    << >>
left    &
left    ^
left    |
listfix in notin is isnot < <= >= > == !=
left    and
left    or
listfix ,

block = '{' statement[;] '}'
if = 'if' expr block ('else' 'if' block)* ('else' block)?

# Statements

fn = 'fn' name '(' id[,] ')' block
return = 'return' expr?
break = 'break'
continue = 'continue'
for = 'for' expr 'in' expr block
while = 'while' expr block
loop = 'loop' block
use = 'use' path
    path = (name '.')* id ('as' id)? | '(' path[,] ')'
let = 'let' pattern '=' expr
assign = view '=' expr

statement = fn | return | break | continue | for | while | loop | use | let | assign
