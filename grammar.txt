# Grammar summary

## Atoms

atom
    id
    1234
    1.0e-5
    d"Hello\\, {x}"
    [x, y, z]
    (x)
    x -> e

# Operators

postfix                 // postfix operators
    x(y) x[y] x.y
    x.await x.chain x?
right **                // exponentiation
prefix ! ~ - : ...      // negative
left [a]..[=][b]        // range syntax
left * @ / // /^ %      // multiplicative operators
left + -                // additive operators
left << >>              // shifts
left &                  // bit and
left ^                  // bit xor
left |                  // bit or
listfix                 // comparators
    in notin
    is isnot
    < <= >= > == !=
left and                // logical and
left or                 // logical or
listfix ,               // tuple

# Compound Expressions

block = '{' statement[;] '}'
if = 'if' expr block ('else' 'if' block)* ('else' block)?

# Statements

fn = 'fn' name '(' id[,] ')' block
return = 'return' expr?
break = 'break'
continue = 'continue'
for = 'for' expr 'in' expr block
while = 'while' expr block
loop = 'loop' block
use = 'use' path
    path = (name '.')* id ('as' id)? | '(' path[,] ')'
let = 'let' pattern '=' expr
assign = view '=' expr

statement = fn | return | break | continue | for | while | loop | use | let | assign
